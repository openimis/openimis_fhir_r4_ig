// This is the profile for openIMIS Patient 
// Mapping is done throught Insuree and Family openIMIS entities
Profile: OpenIMISPatient
Parent: Patient
Id: openimis-patient
Title: "openIMIS Patient"
Description: "Defines a Patient for openIMIS which maps to an Insuree"

* insert ShortAndDefinition(id, Patient UUID, Insuree UUID generated by openIMIS.)

* identifier 1..* MS // Must contain at least the Insuree Code
* identifier.type 1..1  
* identifier.type.coding.code from OpenIMISIdentifierVS (required)
* identifier ^slicing.discriminator.type = #value
* identifier ^slicing.discriminator.path = "type.coding.code"
* identifier ^slicing.rules = #closed
* identifier contains
    InsureeCode 0..1 MS and
    InsureeUUID 0..1 and
    InsureeID 0..1
* identifier[InsureeCode].type.coding.code = OpenIMISIdentifierCS#Code // it is mapped to CHFID
* insert ShortAndDefinition(identifier[InsureeCode], Patient/Insuree openIMIS Code, Insuree Code managed by openIMIS.)
* identifier[InsureeUUID].type.coding.code = OpenIMISIdentifierCS#UUID
* insert ShortAndDefinition(identifier[InsureeUUID], Patient/Insuree openIMIS UUID, Insuree UUID generated by openIMIS.)
* identifier[InsureeID].type.coding.code = OpenIMISIdentifierCS#DBID
* insert ShortAndDefinition(identifier[InsureeID], Patient/Insuree openIMIS Database ID, Insuree Database ID generated by openIMIS.)

* active 0..1 // Not available in openIMIS => could be true if Insuree has active Policy
* insert ShortAndDefinition(active, Active Policy, Mentions if the Patient/Insuree has an Active Policy.)

* name 1..1 // The names by which the Insuree is known
  * ^short = "Patient/Insuree official name"
  * ^definition = "Patient/Insuree official family and given names."
  * family and given MS
  * use = NameUseCS#official

* telecom 0..1 
  * value 1..1 
* telecom ^slicing.discriminator.type = #value
* telecom ^slicing.discriminator.path = "system"
* telecom ^slicing.rules = #closed
* telecom contains
    email 0..1 and
    phone 0..1
* telecom[email].system = ContactPointSystem#email // it is mapped to CHFID
* insert ShortAndDefinition(telecom[email], Patient/Insuree email, Patient/Insuree email contact.)
* telecom[phone].system = ContactPointSystem#phone
* insert ShortAndDefinition(telecom[phone], Patient/Insuree phone, Patient/Insuree phone contact.)

* gender 1..1 MS 
* birthDate 1..1 MS // The date on which the person was born
* deceased[x] 0..0 // Is not available in openIMIS

* address 1..1 MS // Family address or Current address of the Insuree => state->district->extension[municipality]->city
  * type = AddressType#physical
  * country 0..0 // Not used 
  // Location.LocationName from Family's Region (Family.LocationId.ParentLocationId.ParentLocationId.ParentLocationId)
  // Location.LocationName from Insuree's Region (Insuree.CurrentVillage.ParentLocationId.ParentLocationId.ParentLocationId)
  * state 1..1 MS // mapped to Region (see previous two comments) !!!
  * insert ShortAndDefinition(district, Municipality/Ward, Insuree`s municipality/ward name as it is configured in openIMIS.)
  // Location.LocationName from Family's District (Family.LocationId.ParentLocationId.ParentLocationId)
  // Location.LocationName from Insuree's District (Insuree.CurrentVillage.ParentLocationId.ParentLocationId)
  * district 1..1 MS // mapped to District (see previous two comments) !!!
  * insert ShortAndDefinition(district, Municipality/Ward, Insuree`s municipality/ward name as it is configured in openIMIS.)
  // Location.LocationName from Family's Ward (Family.LocationId.ParentLocationId)
  // Location.LocationName from Insuree's Ward (Insuree.CurrentVillage.ParentLocationId)
  * extension contains AddressMunicipality named municipality 1..1 MS // mapped to Ward (see previous two comments) !!!
  * city 1..1 MS // Location.LocationName from Family's City (Family.LocationId) or Insuree's City (Insuree.CurrentVillage)
  * insert ShortAndDefinition(city, Village Name, Insuree`s village name as it is configured in openIMIS.)
  // Location.LocationCode from Family's City (Family.LocationId) or Insuree's City (Insuree.CurrentVillage)
  * postalCode 0..0 // not used
  * line 0..1 // Family.FamilyAddress or Insuree.CurrentAddress
  * extension contains AddressLocationReference named location 1..1 MS // mapped to Ward (see previous two comments) !!!
* address ^slicing.discriminator.type = #value
* address ^slicing.discriminator.path = "use"
* address ^slicing.rules = #closed
* address contains
    FamilyAddress 0..1 MS and
    InsureeAddress 0..1
* address[FamilyAddress].use = AddressUse#home // mapped to Family address
* address[InsureeAddress].use = AddressUse#temp // mapped to Insuree current address

* maritalStatus from OpenIMISMaritalStatusVS (required)
* multipleBirth[x] 0..0

* photo 0..1 MS 
  * contentType 1..1 MS // Mime type of the Insuree image
  * hash 1..1 // data hash 
  * title 1..1 MS // image filename 
  * creation 1..1 MS // image creation date
* photo ^slicing.discriminator.type = #exists
* photo ^slicing.discriminator.path = "url"
* photo ^slicing.rules = #closed
* photo ^slicing.description = "Defines if photo is sent by URL or data"
* photo contains
    URL 0..1 and
    Data 0..1 
* photo[URL] // used in GET Insuree
  * url 1..1
  * data 0..0
  * size 1..1
  * ^short = "used in GET Patient"
* photo[Data] // used in POST && PUT Insuree
  * url 0..0
  * data 1..1
  * size 0..1
  * ^short = "used in POST & PUT Patient"

* contact 0..1  // ToDo: see https://openimis.atlassian.net/browse/OE0-26
  * relationship 0..1
  * relationship from OpenIMISContactRelationshipVS (extensible)
  * name 1..1
  * telecom 0..*
  * address 0..1
  * ^short = "Head of Family contact"
  * ^definition = "Head of Family contact details. If missing, this Person is the Head of Family. Only available in GET Patient."

* communication 0..0 // Not used but can be mapped to tblFamilySMS.LanguageOfSMS

* generalPractitioner only Reference(Organization) // ToDo: see https://openimis.atlassian.net/browse/OE0-25 
* insert ShortAndDefinition(generalPractitioner, First Service Point, Hospital being set as the Insuree`s First Service Point.)

* managingOrganization 0..0
* link 0..0 // ToDo: see https://openimis.atlassian.net/browse/OE0-26

* extension contains PatientIsHeadExtension named isHead 0..1 MS 
* extension[isHead]
  * ^short = "Head of Family"
  * ^definition = "True if the Patient is the Head of the Family"

* extension contains PatientEducationLevelExtension named educationLevel 0..1 
* extension[PatientEducationLevelExtension]
  * ^short = "Patient Education Level"
  * ^definition = "Specifies the Patient's education level"

Extension: PatientEducationLevelExtension
Id:        patient-education-level-extension
Title:    "Patient Education Level"
Description: "Specifies the Patient's education level"
* insert ExtensionContext(Patient)
* value[x] only CodeableConcept
* valueCodeableConcept from PatientEducationLevelVS (extensible)


Instance: john-doe
InstanceOf: OpenIMISPatient
Description: "Example of openIMIS Patient"
* identifier[InsureeCode].value = "123456789"
* identifier[InsureeCode].type = OpenIMISIdentifierCS#Code
* name.family = "Doe"
* name.given[0] = "John"
* gender = #male
* birthDate = "1962-02-05"
* address[FamilyAddress].line = "5 Tsoka"
* address[FamilyAddress].state = "Ultha"
* address[FamilyAddress].district = "Rapta"
* address[FamilyAddress].extension[municipality].valueString = "Jamu"
* address[FamilyAddress].city = "Jamula"
* address[FamilyAddress].extension[location].valueReference = Reference(Jamula-village)
* maritalStatus = MaritalStatusCS#M
* contact[+]
  * relationship = OpenIMISContactRelationshipCS#Brother/Sister
  * name 
    * family = "Doe"
    * given[0] = "Jane"
* extension[isHead].valueBoolean = false
* extension[educationLevel].valueCodeableConcept = PatientEducationLevelCS#University "University"



