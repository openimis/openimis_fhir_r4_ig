// This is the profile for openIMIS ActivityDefinition 
// Mapping is done throught Medical Service openIMIS entity
Profile: OpenIMISActivityDefinition
Parent: ActivityDefinition
Id: openimis-activitiy-definition
Title: "openIMIS ActivityDefinition"
Description: "Defines a ActivityDefinition for openIMIS which maps to a Medical Service."

* id
  * ^short = "ActivityDefinition UUID"
  * ^definition = "ActivityDefinition UUID generated by openIMIS."

* identifier 1..* MS // Must contain at least the ActivityDefinition Code
* identifier.type 1..1  
* identifier.type.coding.code from OpenIMISIdentifierVS (required)
* identifier ^slicing.discriminator.type = #value
* identifier ^slicing.discriminator.path = "type.coding.code"
* identifier ^slicing.rules = #closed
* identifier contains
    ServiceCode 1..1 MS and
    ServiceUUID 0..1 and
    ServiceID 0..1
* identifier[ServiceCode].type.coding.code = OpenIMISIdentifierCS#Code // it is mapped to CHFID
  * ^short = "ActivityDefinition openIMIS Code"
  * ^definition = "ActivityDefinition Code managed by openIMIS."
* identifier[ServiceUUID].type.coding.code = OpenIMISIdentifierCS#UUID
  * ^short = "ActivityDefinition openIMIS UUID"
  * ^definition = "ActivityDefinition UUID generated by openIMIS."
* identifier[ServiceID].type.coding.code = OpenIMISIdentifierCS#DBID
  * ^short = "ActivityDefinition openIMIS Database ID"
  * ^definition = "ActivityDefinition Database ID generated by openIMIS."

* version 0..0
* name 1..1
  * ^short = "Code of the Medical Service (computer friendly)"
  * ^definition = "Medical Service code."
* title 1..1
  * ^short = "Name of the Medical Service (human friendly)"
  * ^definition = "Medical Service name."

* subtitle 0..0
* status = PublicationStatusCS#active "Active"
* experimental 0..0
* subject[x] 0..0
* date 1..1
* publisher 0..0
* contact 0..0
* description 0..0

// Note: the definition of valueCodeableConcept doesn't prohibit to use same code twice.
// To improve we might define slicing based on coding value. 
* useContext 0..4
* useContext.code from  ActivityDefinitionUsageContextTypeVS (required)
* useContext ^slicing.discriminator.type = #value
* useContext ^slicing.discriminator.path = "code"
* useContext ^slicing.rules = #closed
* useContext contains
    Gender 0..1 and
    Age 0..1 and
    Category 0..1 and
    CareType 1..1
* useContext[Gender]
  * code = UsageContextTypeCS#gender "Gender"
  * value[x] only CodeableConcept
  * valueCodeableConcept
    * coding 1..2 
    * coding from ActivityDefinitionUsageContextGenderTypeVS (required)
  * ^short = "Usage Context per Gender"
  * ^definition = "Usage Context per Gender male and female."
* useContext[Age]
  * code = UsageContextTypeCS#age "Age"
  * value[x] only CodeableConcept
  * valueCodeableConcept
    * coding 1..2 
    * coding from ActivityDefinitionUsageContextAgeTypeVS (required)
  * ^short = "Usage Context per Age"
  * ^definition = "Usage Context per Age adult and child."
* useContext[Category]
  * code = UsageContextTypeCS#workflow "Workflow Setting"
  * value[x] only CodeableConcept
  * valueCodeableConcept
    * coding 1..1 
    * coding from ActivityDefinitionUsageContextWorkflowTypeVS (required)
  * ^short = "Usage Context per Workflow"
  * ^definition = "Usage Context per Worflow."
* useContext[CareType] 
  * code = UsageContextTypeCS#venue "Clinical Venue"
  * value[x] only CodeableConcept
  * valueCodeableConcept
    * coding 1..2 
    * coding from ActivityDefinitionUsageContextVenueTypeVS (required)
  * ^short = "Usage Context per Care Type"
  * ^definition = """Usage Context per Care Type. openIMIS `both` value will have both `AMB` and `IMP` codes listed."""

