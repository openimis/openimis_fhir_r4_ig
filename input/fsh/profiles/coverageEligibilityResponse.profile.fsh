// This is the profile for openIMIS Claim Response
// Mapping is done throught Claim openIMIS entity
Profile: OpenIMISCoverageEligibilityResponse
Parent: CoverageEligibilityResponse
Id: openimis-coverage-eligibility-response
Title: "openIMIS CoverageEligibilityResponse"
Description: "Defines a CoverageEligibilityResponse for openIMIS to get the enquire information for an Insuree."

* identifier 1..1 
  * type 1..1  
  * value 1..1
* identifier.type.coding.code from OpenIMISIdentifierVS (required)
* identifier ^slicing.discriminator.type = #value
* identifier ^slicing.discriminator.path = "type.coding.code"
* identifier ^slicing.rules = #closed
* identifier contains
    UUID 1..1 
* identifier[UUID].type.coding.code = OpenIMISIdentifierCS#UUID
  * ^short = "External System generated UUID"
  * ^definition = "UUID generated by external system to indentify the response openIMIS."

* status = FHIRFinancialResourceStatusCodes#active "Active"

* purpose 1..1
* purpose = FHIREligibilityRequestPurpose#benefits "Coverage benefits"
* patient only Reference(OpenIMISPatient)

* serviced[x] 0..0
* created 1..1
* requestor 0..0

* request only Reference(OpenIMISCoverageEligibilityRequest)
* outcome = FHIRClaimProcessingCodes#complete "Processing Complete"

* disposition 0..0

* insurer 1..1
* insurer = Reference(openIMIS)
  * ^definition = "Hardcodded as openIMIS doesn't support multiple insurance organizations."

* insurance 0..* 
  * coverage only Reference(OpenIMISCoverage)
  * inforce 0..0
  * benefitPeriod 1..1
    * start 1..1
      * ^short = "Benefit stat day"
      * ^definition = "First day the benefit is valid (effective date)."
    * end 1..1
      * ^short = "Benefit end day"
      * ^definition = "Last day the benefit is valid (expiry date)."
  * item 1..3
    * category from CoverageItemCategoryVS (required)
      * ^short = "Category"
      * ^definition = "Items category as medical item or service."
    * modifier 0..0
    * provider 0..0
    
    * network 0..0
    * unit 0..0
    * term 0..0
    * authorizationRequired 0..0
    * authorizationSupporting 0..0
    * authorizationUrl 0..0
    
  * item ^slicing.discriminator.type = #value
  * item ^slicing.discriminator.path = "category.coding.code"
  * item ^slicing.rules = #closed
  * item contains
      benefit 1..1 and
      item 0..1 and
      service 0..1

  * item[benefit]
    * ^short = "Coverage eligibility for policy"
    * ^definition = "Coverage eligibility for policy."
    * category = CoverageItemCategoryCS#benefit "Benefit Package"
    * productOrService 0..0
    * excluded 0..0
    * name 1..1 
      * ^short = "Product/Item/Service code"
      * ^definition = "Product/Item/Service code."
    
    * description 1..1 
      * ^short = "Product/Item/Service name"
      * ^definition = "Product/Item/Service name."

    * benefit 0..11
      * used[x] 0..0
    * benefit ^slicing.discriminator.type = #type
    * benefit ^slicing.discriminator.path = "allowed[x]"
    * benefit ^slicing.rules = #closed
    * benefit contains
        total 0..6 and
        amount 0..5
    * benefit[total]
      * type from CoverageItemBenefitTypeTotalLeftVS (required)
      * allowed[x] 1..1
      * allowed[x] only unsignedInt 
    * benefit[amount]
      * type from CoverageItemBenefitTypeAmountLeftVS (required)
      * allowed[x] 1..1
      * allowed[x] only Money 
      * allowedMoney 
        * value 1..1
        * currency 0..1
          

  * item[item]
    * ^short = "Coverage eligibility for item"
    * ^definition = "Coverage eligibility for item."
    * category = CoverageItemCategoryCS#item "Item"
    * productOrService 1..1
      * coding 0..0
      * text 1..1
        * ^short = "Item Code"
        * ^definition = "Item Code."
      * ^short = "Item Code"
      * ^definition = "Item Code."
    * excluded 1..1 
      * ^short = "Item excluded"
      * ^definition = "Item excluded from package."
    * benefit 0..2
      * used[x] 0..0
    * benefit ^slicing.discriminator.type = #value
    * benefit ^slicing.discriminator.path = "type.coding.code"
    * benefit ^slicing.rules = #closed
    * benefit contains
        minDate 0..1 and
        itemLeft 0..1 
    * benefit[minDate]
      * type = CoverageItemCategoryCS#min_date_item "Mininum date"
      * allowed[x] only string 
    * benefit[itemLeft]
      * type = CoverageItemCategoryCS#item_left "Items left"
      * allowed[x] only unsignedInt 

  * item[service]
    * ^short = "Coverage eligibility for service"
    * ^definition = "Coverage eligibility for service."
    * category = CoverageItemCategoryCS#service "Service"
    * productOrService 1..1
      * coding 0..0
      * text 1..1
        * ^short = "Service Code"
        * ^definition = "Service Code."
      * ^short = "Service Code"
      * ^definition = "Service Code."
    * excluded 1..1 
      * ^short = "Service excluded"
      * ^definition = "Service excluded from package."
    * benefit 0..2
    * benefit ^slicing.discriminator.type = #value
    * benefit ^slicing.discriminator.path = "type.coding.code"
    * benefit ^slicing.rules = #closed
    * benefit contains
        minDate 0..1 and
        itemLeft 0..1 
    * benefit[minDate]
      * type = CoverageItemCategoryCS#min_date_item "Mininum date"
      * allowed[x] only string 
      * used[x] 0..0
    * benefit[itemLeft]
      * type = CoverageItemCategoryCS#item_left "Items left"
      * allowed[x] only unsignedInt 
      * used[x] 0..0


* preAuthRef 0..0
* form 0..0
* error 0..0